<!--
################################################################
#                                                              #
#		ROS simmulation for Mobile Robot Olfaction             #
#                           							       #
################################################################
-->

<launch>
    <arg name="scenario" default="Exp_A" />
    <arg name="simulation" default="05ms" />
    <arg name="info" default="true" />
    <arg name="source_location_x" default="2.00" />
    <arg name="source_location_y" default="3.00" />
    <arg name="source_location_z" default="0.50" />
    <arg name="robot_name" default="PioneerP3DX" />
    ### ROBOT SIMULATION ###
	<include file="$(find-pkg-share grgsl_env)/navigation_config/nav2_launch.py" >
		<arg name="scenario" value="$(var scenario)" />
	</include>

	<include file="$(find-pkg-share grgsl_env)/navigation_config/conditional_coppelia_launch.py" >
      <arg name="launchCoppelia" value="True"/>
      <arg name="scenePath" value="$(find-pkg-share grgsl_env)/$(var scenario)/coppeliaScene.ttt"/>
      <arg name="autoplay" value="True"/>
      <arg name="headless" value="True"/>
    </include>  

    #### NAV ASSISTANT ###
    <node pkg="topology_graph" exec="topology_graph_node" name="topology_graph" respawn="false" namespace="$(var robot_name)">
          <param name="verbose" value="False" />        
    </node>
    <node pkg="navigation_assistant" exec="nav_assistant_node" name="nav_assistant" respawn="false" namespace="$(var robot_name)" launch-prefix="xterm -e">
          <param name="use_CNP" value="False" />
        
          # Save/Load from File
          <param name="init_from_file" value="" />          # Leave empty to start with an clean graph
          <param name="save_to_file" value="" />             # Leave empty to NOT save the graph to file
    </node>
	<node pkg="nav_assistant_functions" exec="nav_assistant_functions_node" name="nav_assistant_functions" output="screen" namespace="$(var robot_name)">
        <param name="verbose" value="False" />
    </node>


    ### RVIZ ###
  <node name="rviz_player" pkg="rviz2" exec="rviz2" args="-d $(find-pkg-share grgsl_env)/gaden.rviz" launch-prefix="xterm -e" />
    <!--
  
  
# ===================== GADEN =====================================

     ### NODE environment (for RVIZ visualization) ###
    <node pkg="gaden_environment" exec="environment" name="environment" output="screen">
        <param name="verbose" value="false"/>
        <param name="wait_preprocessing" value="false"/>    	  ### wait for the ok from gaden_preprocessing before running
        <param name="fixed_frame" value="map"/>

        # Plot CAD models (Collada format .dae)        
        <param name="CAD_0" value="$(find-pkg-share grgsl_env)/$(var scenario)/cad_models/10x6_walls.dae"/>
        <param name="CAD_0_color" value="[0.92, 0.96, 0.96]"/>

        <param name="CAD_1" value="$(find-pkg-share grgsl_env)/$(var scenario)/cad_models/10x6_central_obstacle.dae"/>
        <param name="CAD_1_color" value="[0.92, 0.96, 0.96]"/>

        <param name="CAD_2" value="$(find-pkg-share grgsl_env)/$(var scenario)/cad_models/10x6_door_left.dae"/>
        <param name="CAD_2_color" value="[0.96, 0.17, 0.3]"/>

        <param name="CAD_3" value="$(find-pkg-share grgsl_env)/$(var scenario)/cad_models/10x6_door_right.dae"/>
        <param name="CAD_3_color" value="[0.96, 0.17, 0.3]"/>
	            
	            
        # Plot 3D OccupancyGridmap
        <param name="occupancy3D_data" value="$(find-pkg-share grgsl_env)/$(var scenario)/OccupancyGrid3D.csv" />

        # Plot gas sources
        <param name="number_of_sources" value="1"/>
        <param name="source_0_position_x" value="$(var source_location_x)"/>
        <param name="source_0_position_y" value="$(var source_location_y)"/>
        <param name="source_0_position_z" value="$(var source_location_z)"/>

        <param name="source_0_scale" value="0.2"/>
        <param name="source_0_color" value="[0.0, 1.0, 0.0] "/>
    </node>
          

    ### NODE PLAYER ###
    <node pkg="gaden_player" exec="player" name="gaden_player" output="screen">
        <param name="verbose" value="false" />
	    <param name="player_freq" value="2.0" />         ###(Hz) Freq for loading the simulation log_files
	    <param name="initial_iteration" value="35" />
	    <param name="num_simulators" value="1" />      ### Number of simulations to load [1-inf] (useful for multiple sources and gases)
    
        # Data from the "filament_simulator" pkg. Multiple sources can be set here
        <param name="simulation_data_0" value="$(find-pkg-share grgsl_env)/$(var scenario)/gas_simulations/$(var simulation)/FilamentSimulation_gasType_0_sourcePosition_$(var source_location_x)_$(var source_location_y)_$(var source_location_z)" />

        <param name="occupancyFile" value="$(find-pkg-share grgsl_env)/$(var scenario)/OccupancyGrid3D.csv" />
        # Loop options        
        <param name="allow_looping" value="true" />
        <param name="loop_from_iteration" value="40" />
        <param name="loop_to_iteration" value="45" />
        
    </node>
  
  
  ### SENSOR SIMULATION ###
  # SENSOR MODELS: 
  # MOX: TGS2620=0, TGS2600=1, TGS2611=2
  # PID: MiniRaeLite=30
  # Sensors are simulated onboad the robot
  
    <node pkg="simulated_gas_sensor" exec="simulated_gas_sensor" name="fake_pid" output="screen">
        <param name="sensor_model" value="30" />
        <param name="sensor_frame" value="$(var robot_name)_pid_frame" />
        <param name="fixed_frame" value="map"/>
        <param name="noise_std" value="20.1"/>
    </node>
  	<node pkg="tf2_ros" exec="static_transform_publisher" name="pid_broadcaster" args="0.0 0.0 0.5 0.0 0 0 $(var robot_name)_base_link $(var robot_name)_pid_frame 100" />  

	<node pkg="simulated_anemometer" exec="simulated_anemometer" name="fake_anemometer" output="screen">	        
		<param name="sensor_frame" value="$(var robot_name)_anemometer_frame" />
		<param name="fixed_frame" value="map"/>
		<param name="noise_std" value="0.3"/>
		<param name="use_map_ref_system" value="false"/>
	</node>
  	<node pkg="tf2_ros" exec="static_transform_publisher" name="anemometer_broadcaster" args="0.0 0.0 0.5 0.0 0 0 $(var robot_name)_base_link $(var robot_name)_anemometer_frame 100" />
-->

  ## GSL ##
  <node pkg="gsl_server" exec="gsl_actionserver_call" name="gsl_call" output="screen" namespace="$(var robot_name)"> 
    <param name="method" value="GrGSL"/>
  </node> 
  <node pkg="gsl_server" exec="gsl_actionserver_node" name="gsl_node" output="screen" namespace="$(var robot_name)" launch-prefix="xterm -e gdb --args">
    #Common
    <param name="robot_location_topic" value="ground_truth"/>
    <param name="stop_and_measure_time" value="1"/>
    <param name="th_gas_present" value="0.5"/>
    <param name="th_wind_present" value="0.1"/>
    <param name="ground_truth_x" value="$(var source_location_x)"/>
    <param name="ground_truth_y" value="$(var source_location_y)"/>
    <param name="results_file" value="/home/pepe/Documents/Results/GridGSL_$(var scenario)_$(var simulation)_Infotaxis_$(var info).csv"/>
    
    #Grid
    <param name="scale" value="60"/>
    <param name="stdev_hit" value="1.0"/>
    <param name="stdev_miss" value="1.5"/>
    <param name="convergence_thr" value="0.5"/>
    <param name="infoTaxis" value="$(var info)"/>

    #Surge-Cast
    <param name="step" value="0.8"/>
  </node> 


  ## GMRF
  <node pkg="gmrf_wind_mapping" exec="gmrf_wind_mapping_node" name="gmrf" namespace="$(var robot_name)"> 
    <param name="sensor_topic" value="/Anemometer/WindSensor_reading"/>
    <param name="cell_size" value="0.6"/>
  </node> 

</launch>
