<!--
################################################################
#                                                              #
#		ROS simmulation for Mobile Robot Olfaction             #
#                           							       #
################################################################
-->

<launch>
    
   <arg name="scenario" default="C" />
   <arg name="simulation" default="3,5-1_fast" />
   <arg name="source_location_x" default="0.00" />
   <arg name="source_location_y" default="-1.00" />
   <arg name="source_location_z" default="0.20" />
   <arg name="gas_type" default="10" />


    <arg name="floor_height" default="-0.7" />
    <arg name="info" default="true" />
    <arg name="stopTime" default="2" />
    <arg name="sensor" default="30" />
    <arg name="mode" default="full" />
    <arg name="threshold" default="0.0" />
    
    ### ROBOT SIMULATION ###

  <node pkg="offset_pose" exec="offset" name="offset" output="screen">
    <param name="x" value="0.0"/>
    <param name="y" value="0.0"/>
    <param name="z" value="$(var floor_height)"/>
  </node>
  <node pkg="tf2_ros" exec="static_transform_publisher" name="offset_tf_broadcaster" args="0.0 0.0 $(var floor_height) 0 0 0 base_link offset_frame 100" />


    <arg name="use_sim_time" default="true" />


    <node pkg="stage_ros" exec="stageros" name="stage_ros" respawn="false" args="$(find-pkg-share pmfs_env)/$(var scenario)/launch/ros/stage.world" >
        <param name="laser_scan_topic" value="/laser_scan"/>
        <param name="laser_frame_id" value="laser_stage" />
        <param name="odom_topic" value="/odom"/>
        <param name="odom_frame_id" value="odom" />    
        <param name="disable_odometry" value="false" />    
    </node>

    ### URDF MODEL ###
    <param name="robot_description" textfile="$(find-pkg-share pmfs_env)/$(var scenario)/launch/ros/giraff.urdf" />
    <param name="use_gui" value="False"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" exec="state_publisher" />

    ### NAVIGATION ###
    <node name="map_server" pkg="map_server" exec="map_server" args="$(find-pkg-share pmfs_env)/$(var scenario)/occupancy.yaml">
      <param name="frame_id" value="map"/>
    </node> 
    <include file="$(find-pkg-share pmfs_env)/$(var scenario)/launch/ros/simbot_move_base.launch" >
      <arg name="scenario" value="$(var scenario)"/>
      <arg name="global_planner_plugin" value="navfn/NavfnROS"/>
    </include>  
    
    <node pkg="fake_localization" exec="fake_localization" name="fake_localization">	    
        <param name="odom_frame_id" value="odom"/>
        <param name="global_frame_id" value="map"/>
        <param name="base_frame_id" value="base_link"/>
    </node>

  #### NAV ASSISTANT ###
  <node pkg="topology_graph" exec="topology_graph" name="topology_graph" respawn="false" >
        <param name="verbose" value="False" />        
  </node>
  <node pkg="navigation_assistant" exec="nav_assistant_node" name="nav_assistant" respawn="false" >
        <param name="use_CNP" value="False" />
      
        # Save/Load from File
        <param name="init_from_file" value="" />          # Leave empty to start with an clean graph
        <param name="save_to_file" value="" />             # Leave empty to NOT save the graph to file
  </node>
  <node pkg="navigation_assistant" exec="nav_assistant_functions.py" name="nav_assistant_functions" respawn="false" >
        <param name="verbose" value="False" />
    </node>

    
    ### RVIZ ###
    <node name="rviz_player" pkg="rviz2" exec="rviz2" args="-d $(find-pkg-share pmfs_env)/$(var scenario)/launch/ros/gaden.rviz"/>
          <!--args="-d $(find-pkg-share vimantic)/launch/ViMantic_virtualHome_detectron.rviz"/-->

# ===================== GADEN =====================================

    ### NODE environment (for RVIZ visualization) ###
    <node pkg="gaden_environment" exec="environment" name="environment" output="screen">
        <param name="verbose" value="false"/>
        <param name="wait_preprocessing" value="false"/>    	  ### wait for the ok from gaden_preprocessing before running
        <param name="fixed_frame" value="map"/>

        # Plot CAD models (Collada format .dae)
        <param name="number_of_CAD" value="1"/>
        <rosparam subst_value="True">
            CAD_0:$(find-pkg-share pmfs_env)/$(var scenario)/cad_models/$(var scenario).dae
            CAD_0_color: [0.5, 0.5, 0.5]
            
        </rosparam>
	            
        # Plot 3D OccupancyGridmap
        <param name="occupancy3D_data" value="$(find-pkg-share pmfs_env)/$(var scenario)/OccupancyGrid3D.csv" />

        # Plot gas sources
        <param name="number_of_sources" value="1"/>
        <param name="source_0_position_x" value="$(var source_location_x)"/>
        <param name="source_0_position_y" value="$(var source_location_y)"/>
        <param name="source_0_position_z" value="$(var source_location_z)"/>

        <param name="source_0_scale" value="0.2"/>
        <param name="source_0_color" value="[0.0, 1.0, 0.0] "/>
    </node>

          

    ### NODE PLAYER ###
    #-------------------
    <node pkg="gaden_player" exec="player" name="gaden_player" output="screen" >
        <param name="verbose" value="false" />
	    <param name="player_freq" value="2" />         ###(Hz) Freq for loading the simulation log_files
	    <param name="initial_iteration" value="500" />
	    <param name="num_simulators" value="1" />      ### Number of simulations to load [1-inf] (useful for multiple sources and gases)
    
        # Data from the "filament_simulator" pkg. Multiple sources can be set here
        <param name="simulation_data_0" value="$(find-pkg-share pmfs_env)/$(var scenario)/gas_simulations/$(var simulation)/FilamentSimulation_gasType_$(var gas_type)_sourcePosition_$(var source_location_x)_$(var source_location_y)_$(var source_location_z)" />
        
        # Loop options        
        <param name="allow_looping" value="true" />
        <param name="loop_from_iteration" value="900" />
        <param name="loop_to_iteration" value="1000" />
        
        <param name="occupancyFile" value="$(find-pkg-share pmfs_env)/$(var scenario)/OccupancyGrid3D.csv" />
        
    </node>
  
  ### SENSOR SIMULATION ###
  # SENSOR MODELS: 
  # MOX: TGS2620=0, TGS2600=1, TGS2611=2
  # PID: MiniRaeLite=30
  # Sensors are simulated onboad the robot
  
  <group namespace="PID">
    <node pkg="simulated_gas_sensor" exec="simulated_gas_sensor" name="fake_pid" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="pid_frame" />
        <param name="/fixed_frame" value="map"/>
        <param name="/noise_std" value="0.1"/>
    </node>
  </group>
  <node pkg="tf2_ros" exec="static_transform_publisher" name="pid_broadcaster" args="0.0 0.0 0.5 0.0 0 0 offset_frame pid_frame 100" />  

  <group namespace="Anemometer">
    <node pkg="simulated_anemometer" exec="simulated_anemometer" name="fake_anemometer" output="screen">	        
      <param name="/sensor_frame" value="anemometer_frame" />
      <param name="/fixed_frame" value="map"/>
      <param name="/noise_std" value="0.1"/>
      <param name="/use_map_ref_system" value="false"/>
    </node>
  </group>
  <node pkg="tf2_ros" exec="static_transform_publisher" name="anemometer_broadcaster" args="0.0 0.0 0.5 0.0 0 0 offset_frame anemometer_frame 100" />


 <!--include file="$(find-pkg-share kernel_dmv_mapping)/roslaunch/create_dmv_maps.launch" /-->

  ## GSL ##

  <node pkg="gsl_actionserver" exec="gsl_actionserver_node" name="gsl_node" output="screen"  > 
    #Common
    <param name="robot_location_topic" value="/amcl_pose_with_offset"/>

    <param name="max_search_time" value="10000"/>
    <param name="stop_and_measure_time" value="$(var stopTime)"/>
    <param name="th_gas_present" value="0.1"/>
    <param name="th_wind_present" value="0.1"/>
    <param name="ground_truth_x" value="$(var source_location_x)"/>
    <param name="ground_truth_y" value="$(var source_location_y)"/>
    <param name="results_file" value="/home/pepe/catkin_ws/src/Results/New/House01_bath_GT/results.csv"/>
    <param name="errors_file"  value="/home/pepe/catkin_ws/src/Results/New/House01_bath_GT/error_over_time.csv"/>
    <param name="path_file"    value="/home/pepe/catkin_ws/src/Results/New/House01_bath_GT/path.csv"/>

    <param name="testMode" value="false"/>
    <param name="testFile" value="/home/pepe/catkin_ws/testFiles/test3.jpg"/>

    
    #Grid
    <param name="scale" value="25"/>
    <param name="markers_height" value="0"/>
    <param name="debug" value="true"/>

    <param name="allowMovementRepetition" value="true"/>
    <param name="openMoveSetExpasion" value="5"/>
    <param name="explorationProbability" value="0.1"/>

    <param name="convergence_thr" value="1.5"/> # negative to never end
    <param name="convergence_steps" value="5"/>

    #GrGSL
    <param name="stdev_hit" value="1.0"/>
    <param name="stdev_miss" value="1.2"/>

    #PMFS
    <param name="max_updates_per_stop" value="5"/>

    <param name="kernel_sigma" value="1.5"/>
    <param name="kernel_stretch_constant" value="1.5"/>

    <param name="hitPriorProbability" value="0.3"/>
    <param name="confidence_sigma_spatial" value="1"/>
    <param name="confidence_measurement_weight" value="1"/>
    
    <param name="useWindGroundTruth" value="true"/>
    <param name="stepsSourceUpdate" value="3"/>

    <param name="maxRegionSize" value="5"/>

    <param name="sourceDiscriminationPower" value="0.2"/> #higher value to increase the difference in the source probability of "good cells" and "bad cells"
    <param name="refineFraction" value="0.25"/> #proportion of cells that will be subdivided
    <param name="deltaTime" value="0.1"/>
    <param name="noiseSTDev" value="0.5"/>
    <param name="iterationsToRecord" value="200"/>
    <param name="maxWarmupIterations" value="500"/>
  </node> 
  
  ## GMRF
  <node pkg="gmrf_wind_mapping" exec="gmrf_wind_mapping_node" name="gmrf"> 
    <param name="sensor_topic" value="/Anemometer/WindSensor_reading"/>
    <param name="cell_size" value="0.25"/>
    <param name ="exec_freq" value ="0.5"/>
  </node> 

  <node pkg="gsl_actionserver" exec="gsl_actionserver_call" name="gsl_call" output="screen"> 
    <param name="method" value="PMFS"/>
  </node> 
</launch>