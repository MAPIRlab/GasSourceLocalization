<!--
################################################################
#                                                              #
#		ROS simmulation for Mobile Robot Olfaction             #
#                           							       #
################################################################
-->

<launch>
    
    <arg name="scenario" default="Exp_C" />
    <arg name="simulation" default="1,2,3-5,6" />

<!--
    <arg name="source_location_x" default="1.75" />
    <arg name="source_location_y" default="8.60" />
    <arg name="source_location_z" default="0.50" />

-->

<!--
    <arg name="source_location_x" default="5.00" />
    <arg name="source_location_y" default="3.20" />
    <arg name="source_location_z" default="0.50" />


-->
    <arg name="source_location_x" default="5.00" />
    <arg name="source_location_y" default="6.20" />
    <arg name="source_location_z" default="0.50" />

    <arg name="floor_height" default="0" />
    <arg name="info" default="true" />
    <arg name="sensor" default="30" />
    
    ### ROBOT SIMULATION ###

  <node pkg="offset_pose" type="offset" name="offset" output="screen">
    <param name="x" value="0.0"/>
    <param name="y" value="0.0"/>
    <param name="z" value="$(arg floor_height)"/>
  </node>
  <node pkg="tf" type="static_transform_publisher" name="offset_tf_broadcaster" args="0.0 0.0 $(arg floor_height) 0 0 0 base_link offset_frame 100" />


    <param name="use_sim_time" value="true" />


    <node pkg="stage_ros" type="stageros" name="stage_ros" respawn="false" args="$(find GrGSL_env)/$(arg scenario)/launch/ros/stage.world" >
        <param name="laser_scan_topic" value="/laser_scan"/>
        <param name="laser_frame_id" value="laser_stage" />
        <param name="odom_topic" value="/odom"/>
        <param name="odom_frame_id" value="odom" />    
        <param name="disable_odometry" value="false" />    
    </node>

    ### URDF MODEL ###
    <param name="robot_description" textfile="$(find GrGSL_env)/$(arg scenario)/launch/ros/giraff.urdf" />
    <param name="use_gui" value="False"/>

    ### NAVIGATION ###
    <node name="map_server" pkg="map_server" type="map_server" args="$(find GrGSL_env)/$(arg scenario)/occupancy.yaml">
      <param name="frame_id" value="map"/>
    </node> 
    <include file="$(find GrGSL_env)/$(arg scenario)/launch/ros/simbot_move_base.launch" >
      <arg name="scenario" value="$(arg scenario)"/>
      <arg name="global_planner_plugin" value="navfn/NavfnROS"/>
    </include>  
    
    <node pkg="fake_localization" type="fake_localization" name="fake_localization">	    
        <param name="odom_frame_id" value="odom"/>
        <param name="global_frame_id" value="map"/>
        <param name="base_frame_id" value="base_link"/>
    </node>

    #### NAV ASSISTANT ###
    <node pkg="topology_graph" type="topology_graph" name="topology_graph" respawn="false" >
          <param name="verbose" value="False" />        
    </node>
    <node pkg="navigation_assistant" type="nav_assistant_node" name="nav_assistant" respawn="false">
          <param name="use_CNP" value="False" />
        
          # Save/Load from File
          <param name="init_from_file" value="" />          # Leave empty to start with an clean graph
          <param name="save_to_file" value="" />             # Leave empty to NOT save the graph to file
    </node>
    <node pkg="navigation_assistant" type="nav_assistant_functions.py" name="nav_assistant_functions" respawn="false" >
        <param name="verbose" value="False" />
    </node>


    ### RVIZ ###
    <node name="rviz_player" pkg="rviz" type="rviz" args="-d $(find GrGSL_env)/$(arg scenario)/launch/ros/gaden.rviz"/>
    <node name="rviz_player_2" pkg="rviz" type="rviz" args="-d $(find GrGSL_env)/$(arg scenario)/launch/ros/hitOnly.rviz"/>
          <!--args="-d $(find vimantic)/launch/ViMantic_virtualHome_detectron.rviz"/-->

# ===================== GADEN =====================================

    ### NODE environment (for RVIZ visualization) ###
    <node pkg="gaden_environment" type="environment" name="environment" output="screen">
        <param name="verbose" value="false"/>
        <param name="wait_preprocessing" value="false"/>    	  ### wait for the ok from gaden_preprocessing before running
        <param name="fixed_frame" value="map"/>

        # Plot CAD models (Collada format .dae)
        <param name="number_of_CAD" value="2"/>
        <rosparam subst_value="True">
            CAD_0: package://GrGSL_env/$(arg scenario)/cad_models/$(arg scenario).dae
            CAD_0_color: [1.0, 0.2, 0.2]
            CAD_1: package://GrGSL_env/$(arg scenario)/cad_models/ROOMS-walls.dae
            CAD_1_color: [1, 1, 1]
            
        </rosparam>
	            
        # Plot 3D OccupancyGridmap
        <param name="occupancy3D_data" value="$(find GrGSL_env)/$(arg scenario)/OccupancyGrid3D.csv" />

        # Plot gas sources
        <param name="number_of_sources" value="1"/>
        <param name="source_0_position_x" value="$(arg source_location_x)"/>
        <param name="source_0_position_y" value="$(arg source_location_y)"/>
        <param name="source_0_position_z" value="$(arg source_location_z)"/>
        <rosparam>
            source_0_scale: 0.2
            source_0_color: [1.0, 0.0, 1.0] 
        </rosparam>
    </node>

          

    ### NODE PLAYER ###
    #-------------------
    <node pkg="gaden_player" type="gaden_player" name="gaden_player" output="screen">
        <param name="verbose" value="false" />
	    <param name="player_freq" value="2" />         ###(Hz) Freq for loading the simulation log_files
	    <param name="initial_iteration" value="40" />
	    <param name="num_simulators" value="1" />      ### Number of simulations to load [1-inf] (useful for multiple sources and gases)
    
        # Data from the "filament_simulator" pkg. Multiple sources can be set here
        <param name="simulation_data_0" value="$(find GrGSL_env)/$(arg scenario)/gas_simulations/$(arg simulation)/FilamentSimulation_gasType_1_sourcePosition_$(arg source_location_x)_$(arg source_location_y)_$(arg source_location_z)" />
        
        # Loop options
        <param name="allow_looping" value="true" />
        <param name="loop_from_iteration" value="900" />
        <param name="loop_to_iteration" value="1000" />
        
        <param name="occupancyFile" value="$(find GrGSL_env)/$(arg scenario)/OccupancyGrid3D.csv" />
        
    </node>
  
  ### SENSOR SIMULATION ###
  # SENSOR MODELS: 
  # MOX: TGS2620=0, TGS2600=1, TGS2611=2
  # PID: MiniRaeLite=30
  # Sensors are simulated onboad the robot
  
  <group ns="PID">
    <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="fake_pid" output="screen">
        <param name="/sensor_model" value="30" />
        <param name="/sensor_frame" value="pid_frame" />
        <param name="/fixed_frame" value="map"/>
        <param name="/noise_std" value="0.1"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="pid_broadcaster" args="0.0 0.0 0.5 0 0 0 offset_frame pid_frame 100" />  

  <group ns="Anemometer">
    <node pkg="simulated_anemometer" type="simulated_anemometer" name="fake_anemometer" output="screen">	        
      <param name="/sensor_frame" value="anemometer_frame" />
      <param name="/fixed_frame" value="map"/>
      <param name="/noise_std" value="0.1"/>
      <param name="/use_map_ref_system" value="false"/>
    </node>
  </group>
  <node pkg="tf" type="static_transform_publisher" name="anemometer_broadcaster" args="0.0 0.0 0.5 0 0 0 offset_frame anemometer_frame 100" />

<!--node pkg="simulated_tdlas" type="simulated_tdlas" name="tdlas" output="screen" >	        
    <param name="sensor_frame" value="tdlas_frame" />
    <param name="fixed_frame" value="map"/>
    <param name="verbose" value="false"/>
    <param name="measurementFrequency" value="5"/>
    <param name="rayMarchResolution" value="0.01"/>
</node>
<node pkg="tf" type="static_transform_publisher" name="tdlas_broadcaster" args="0.0 0.0 0.5 0 0 0 offset_frame tdlas_frame 100" /-->

 <!--include file="$(find kernel_dmv_mapping)/roslaunch/create_dmv_maps.launch" /-->

  ## GSL ##
  <!--launch-prefix="xterm -e gdb -args"-->
  <!--launch-prefix="gdb -ex run -args" -->
  
  <node pkg="gsl_actionserver" type="gsl_actionserver_node" name="gsl_node" output="screen" required="true" > 
    #Common
    <param name="robot_location_topic" value="/amcl_pose_with_offset"/>

    <param name="max_search_time" value="10000"/>
    <param name="stop_and_measure_time" value="0.5"/>
    <param name="th_gas_present" value="0.2"/>
    <param name="th_wind_present" value="0.1"/>
    <param name="ground_truth_x" value="$(arg source_location_x)"/>
    <param name="ground_truth_y" value="$(arg source_location_y)"/>
    <param name="results_file" value="/home/pepe/Documents/Results/old/EXPC_left/results.csv"/>
    <param name="errors_file"  value="/home/pepe/Documents/Results/old/EXPC_left/error_over_time.csv"/>
    <param name="path_file"    value="/home/pepe/Documents/Results/old/EXPC_left/path.csv"/>

    <param name="testMode" value="false"/>
    <param name="testFile" value="/home/pepe/catkin_ws/testFiles/test3.jpg"/>

    
#Grid
    <param name="scale" value="25"/>
    <param name="markers_height" value="0"/>
    <param name="debug" value="true"/>

    <param name="allowMovementRepetition" value="$(arg info)"/>
    <param name="openMoveSetExpasion" value="5"/>
    <param name="explorationProbability" value="0.1"/>

    <param name="convergence_thr" value="1"/> 
    <param name="convergence_steps" value="5"/>
    #Old
    <param name="stdev_hit" value="1.0"/>
    <param name="stdev_miss" value="1.2"/>

    #New
    <param name="max_updates_per_stop" value="5"/>

    <param name="kernel_sigma" value="1.5"/>
    <param name="kernel_stretch_constant" value="1.5"/>

    <param name="hitPriorProbability" value="0.3"/>
    <param name="confidence_sigma_spatial" value="1"/>
    <param name="confidence_measurement_weight" value="1"/>
    
    <param name="useWindGroundTruth" value="true"/>
    <param name="stepsSourceUpdate" value="3"/>

    <param name="maxRegionSize" value="5"/>

    <param name="sourceDiscriminationPower" value="0.2"/> #higher value to increase the difference in the source probability of "good cells" and "bad cells"
    <param name="refineFraction" value="0.25"/> #proportion of cells that will be subdivided
    <param name="deltaTime" value="0.1"/>
    <param name="noiseSTDev" value="0.5"/>
    <param name="iterationsToRecord" value="200"/>
    <param name="maxWarmupIterations" value="500"/>

    #Surge-Cast
    <param name="step" value="0.7"/>
    <param name="moving_average_size" value="25"/>

    #Semantic Grid
    <param name="ontology_file" value="/home/pepe/ontologies/Detectron.owl"/>
    <param name="gas_type" value=""/>
  </node> 
  
  ## GMRF
  <node pkg="gmrf_wind_mapping" type="gmrf_wind_mapping_node" name="gmrf" > 
    <param name="sensor_topic" value="/Anemometer/WindSensor_reading"/>
    <param name="cell_size" value="0.25"/>
    <param name ="exec_freq" value ="0.5"/>
  </node> 

  <node pkg="gsl_actionserver" type="gsl_actionserver_call" name="gsl_call" output="screen"> 
    <param name="method" value="PMFS"/>
  </node> 
</launch>